// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

//notifications
enum NotificationType {
  EVENT_SUBMITTED
  EVENT_APPROVED
  EVENT_REJECTED
  BLOG_SUBMITTED
  BLOG_APPROVED
  BLOG_REJECTED
  TICKET_PURCHASED
  EVENT_CANCELLED
  REFUND_PROCESSED
  VENUE_SUBMITTED
  VENUE_APPROVED
  VENUE_REJECTED
  SYSTEM_UPDATE
  PAYMENT_RECEIVED
  USER_REGISTERED
  USER_UPGRADED_TO_ORGANIZER // Add this line
}

enum NotificationStatus {
  UNREAD
  READ
  ARCHIVED
}

model Notification {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  type      NotificationType
  status    NotificationStatus @default(UNREAD)
  title     String
  message   String
  actionUrl String?
  metadata  Json?
  readAt    DateTime?

  userId String?
  user   User?   @relation(fields: [userId], references: [id], onDelete: Cascade)

  isAdminNotification Boolean @default(false)

  eventId String?
  event   Event?  @relation(fields: [eventId], references: [id], onDelete: Cascade)

  blogId String?

  orderId String?
  order   Order?  @relation(fields: [orderId], references: [id], onDelete: Cascade)

  venueId String?
  venue   Venue?  @relation(fields: [venueId], references: [id], onDelete: Cascade)

  @@index([userId, status])
  @@index([isAdminNotification, status])
  @@index([type, status])
  @@index([createdAt])
}

// user
enum Gender {
  MALE
  FEMALE
}

enum UserRole {
  ADMIN
  USER
}

enum UserSubRole {
  ORDINARY
  ORGANIZER
  STAFF
  SUPER_ADMIN
}

model OrganizerProfile {
  id               String  @id @default(cuid())
  organizationName String
  bio              String?
  website          String?
  userId           String  @unique
  user             User    @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Verification {
  id        String    @id @default(cuid())
  createdAt DateTime?
  updatedAt DateTime?

  identifier String
  value      String
  expiresAt  DateTime

  @@map("verifications")
}

model Session {
  id             String   @id @default(cuid())
  impersonatedBy String?
  createdAt      DateTime
  updatedAt      DateTime

  expiresAt DateTime
  token     String   @unique
  ipAddress String?
  userAgent String?

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model Account {
  id        String   @id @default(cuid())
  createdAt DateTime
  updatedAt DateTime

  accountId             String
  providerId            String
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("accounts")
}

model TwoFactor {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  secret      String
  backupCodes String?
  verified    Boolean @default(false)

  userId String @unique
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("twoFactor")
}

enum WaitingStatus {
  WAITING
  OFFERED
  PURCHASED
  EXPIRED
}

model WaitingList {
  id             String    @id @default(cuid())
  offerExpiresAt DateTime?

  eventId String
  event   Event  @relation(fields: [eventId], references: [id])
  userId  String
  user    User   @relation(fields: [userId], references: [id])

  status WaitingStatus @default(WAITING)

  @@index([eventId, status])
  @@index([userId, eventId])
  @@index([userId])
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
}

enum RefundStatus {
  INITIATED
  PROCESSED
  FAILED
}

model Order {
  id            String        @id @default(cuid())
  createdAt     DateTime      @default(now())
  paystackId    String        @unique
  totalAmount   Float
  quantity      Int
  paymentStatus PaymentStatus @default(PENDING)
  refundStatus  RefundStatus?

  eventId       String
  event         Event          @relation(fields: [eventId], references: [id])
  buyerId       String
  buyer         User           @relation(fields: [buyerId], references: [id])
  purchaseNotes String?
  Notification  Notification[]

  @@index([buyerId])
}

model UserNote {
  id        String   @id @default(cuid())
  userId    String
  note      String
  createdBy String
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_notes")
}

model User {
  id        String   @id @default(uuid())
  createdAt DateTime
  updatedAt DateTime

  name          String
  email         String      @unique
  emailVerified Boolean
  image         String?
  firstName     String?
  lastName      String?
  banned        Boolean?
  banReason     String?
  banExpires    DateTime?
  gender        Gender?
  role          UserRole    @default(USER)
  subRole       UserSubRole @default(ORDINARY)

  // For proper suspension support
  suspended        Boolean?  @default(false)
  suspensionReason String?
  suspendedAt      DateTime?

  // For admin notes
  adminNotes UserNote[]

  // For better activity tracking
  lastSeen DateTime?

  sessions         Session[]
  accounts         Account[]
  waitingList      WaitingList[]
  blogs            Blog[]
  orders           Order[]
  rating           Rating[]
  tickets          Ticket[]
  venue            Venue[]
  eventsHosted     Event[]
  organizerProfile OrganizerProfile?
  twoFactor        TwoFactor?
  Notification     Notification[]

  @@map("users")
}

// events
enum AgeRestriction {
  ALL_AGES
  AGE_14_PLUS
  AGE_18_PLUS
  AGE_21_PLUS
  AGE_25_PLUS
  KIDS_ONLY
  SENIORS_ONLY
}

enum DressCode {
  CASUAL
  BUSINESS_CASUAL
  FORMAL
  BLACK_TIE
  THEMED_COSTUME
  SMART_CASUAL
  ALL_WHITE
  NO_DRESS_CODE
}

enum PublishedStatus {
  DRAFT
  PENDING_REVIEW
  PUBLISHED
  REJECTED
}

model Tag {
  id      String  @id @default(cuid())
  name    String  @unique
  bgColor String
  slug    String?
  events  Event[]

  @@index([name])
}

model Rating {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  eventId   String
  event     Event    @relation(fields: [eventId], references: [id])
  rating    Decimal
  comment   String?

  @@unique([userId, eventId]) // Ensure one review per user per event
  @@index([eventId])
  @@index([userId])
}

enum TicketStatus {
  UNUSED
  USED
  REFUNDED
  CANCELLED
}

model Ticket {
  id              String       @id @default(cuid())
  ticketId        String       @unique
  userId          String?
  user            User?        @relation(fields: [userId], references: [id])
  ticketTypeId    String
  ticketType      TicketType   @relation(fields: [ticketTypeId], references: [id])
  status          TicketStatus @default(UNUSED)
  purchasedAt     DateTime     @default(now())
  paymentIntentId String?      @unique

  @@index([userId])
}

model TicketType {
  id       String   @id @default(cuid())
  name     String
  price    Float    @default(0.0)
  quantity Int
  eventId  String
  event    Event    @relation(fields: [eventId], references: [id])
  tickets  Ticket[]

  @@index([eventId])
}

model Category {
  id     String  @id @default(cuid())
  name   String  @unique
  events Event[]

  @@index([name])
}

model City {
  id         String  @id @default(cuid())
  name       String  @unique
  population Int?
  state      String
  events     Event[]
  venues     Venue[]

  @@index([name])
}

model Venue {
  id            String         @id @default(cuid())
  name          String
  address       String
  cityId        String
  city          City           @relation(fields: [cityId], references: [id])
  userId        String
  description   String?
  contactInfo   String?
  user          User           @relation(fields: [userId], references: [id])
  capacity      Int?
  venueImageUrl String?
  latitude      String?
  longitude     String?
  events        Event[]
  Notification  Notification[]

  @@index([cityId])
}

model Event {
  id               String          @id @default(cuid())
  slug             String?
  title            String
  description      String?
  location         String?
  createdAt        DateTime        @default(now())
  coverImageUrl    String?
  startDateTime    DateTime        @default(now())
  endDateTime      DateTime        @default(now())
  isFree           Boolean         @default(false)
  url              String?
  lateEntry        DateTime?
  idRequired       Boolean?        @default(false)
  attendeeLimit    Int?
  featured         Boolean         @default(false)
  embeddedVideoUrl String?
  dressCode        DressCode?
  age              AgeRestriction?

  imageUrls   String[]
  tags        Tag[]
  ratings     Rating[]
  ticketTypes TicketType[]
  orders      Order[]
  waitingList WaitingList[]

  userId     String?
  category   Category? @relation(fields: [categoryId], references: [id])
  categoryId String?
  user       User?     @relation(fields: [userId], references: [id])
  venueId    String
  venue      Venue     @relation(fields: [venueId], references: [id])
  cityId     String?
  City       City?     @relation(fields: [cityId], references: [id])

  isCancelled     Boolean?        @default(false)
  publishedStatus PublishedStatus @default(DRAFT)
  Notification    Notification[]

  @@index([title])
}

enum BlogStatus {
  DRAFT
  PENDING_REVIEW
  PUBLISHED
  REJECTED
}

model BlogCategory {
  id          String   @id @default(cuid())
  name        String   @unique
  slug        String   @unique
  description String?
  color       String   @default("#3B82F6") // Default blue color
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  blogs       Blog[]

  @@index([name])
  @@index([slug])
  @@map("blog_categories") // Different table name from event categories
}

model Blog {
  id              String     @id @default(cuid())
  title           String
  slug            String     @unique
  excerpt         String?
  content         String     @db.Text
  featuredImage   String?
  metaTitle       String?
  metaDescription String?
  tags            String[]
  readingTime     Int? // in minutes
  views           Int        @default(0)
  featured        Boolean    @default(false)
  status          BlogStatus @default(DRAFT)
  publishedAt     DateTime?
  createdAt       DateTime   @default(now())
  updatedAt       DateTime   @updatedAt

  // Relations
  authorId   String
  author     User         @relation(fields: [authorId], references: [id])
  categoryId String
  category   BlogCategory @relation(fields: [categoryId], references: [id])

  @@index([status, publishedAt(sort: Desc)])
  @@index([authorId])
  @@index([categoryId])
  @@index([slug])
  @@index([featured])
}
