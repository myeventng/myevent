// Updated Prisma schema with additional models for the ticketing system

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Enums
enum NotificationType {
  EVENT_SUBMITTED
  EVENT_APPROVED
  EVENT_REJECTED
  BLOG_SUBMITTED
  BLOG_APPROVED
  BLOG_REJECTED
  TICKET_PURCHASED
  TICKET_AVAILABLE
  EVENT_CANCELLED
  REFUND_REQUESTED
  REFUND_PROCESSED
  VENUE_SUBMITTED
  VENUE_APPROVED
  VENUE_REJECTED
  SYSTEM_UPDATE
  PAYMENT_RECEIVED
  USER_REGISTERED
  USER_UPGRADED_TO_ORGANIZER
  ORDER_CONFIRMATION
  PAYOUT_PROCESSED
}

enum NotificationStatus {
  UNREAD
  READ
  ARCHIVED
}

enum Gender {
  MALE
  FEMALE
}

enum UserRole {
  ADMIN
  USER
}

enum UserSubRole {
  ORDINARY
  ORGANIZER
  STAFF
  SUPER_ADMIN
}

enum AgeRestriction {
  ALL_AGES
  AGE_14_PLUS
  AGE_18_PLUS
  AGE_21_PLUS
  AGE_25_PLUS
  KIDS_ONLY
  SENIORS_ONLY
}

enum DressCode {
  CASUAL
  BUSINESS_CASUAL
  FORMAL
  BLACK_TIE
  THEMED_COSTUME
  SMART_CASUAL
  ALL_WHITE
  NO_DRESS_CODE
}

enum PublishedStatus {
  DRAFT
  PENDING_REVIEW
  PUBLISHED
  REJECTED
}

enum WaitingStatus {
  WAITING
  OFFERED
  PURCHASED
  EXPIRED
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
}

enum RefundStatus {
  INITIATED
  PROCESSED
  FAILED
  REJECTED
}

enum TicketStatus {
  UNUSED
  USED
  REFUNDED
  CANCELLED
}

enum BlogStatus {
  DRAFT
  PENDING_REVIEW
  PUBLISHED
  REJECTED
}

enum PayoutStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
}

enum OrganizationType {
  COMPANY
  INDIVIDUAL
  NGO
  GOVERNMENT
  OTHER
}

enum VerificationStatus {
  PENDING
  VERIFIED
  REJECTED
}

// Models
model Notification {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  type      NotificationType
  status    NotificationStatus @default(UNREAD)
  title     String
  message   String
  actionUrl String?
  metadata  Json?
  readAt    DateTime?

  userId String?
  user   User?   @relation(fields: [userId], references: [id], onDelete: Cascade)

  isAdminNotification Boolean @default(false)

  eventId String?
  event   Event?  @relation(fields: [eventId], references: [id], onDelete: Cascade)

  blogId String?

  orderId String?
  order   Order?  @relation(fields: [orderId], references: [id], onDelete: Cascade)

  venueId String?
  venue   Venue?  @relation(fields: [venueId], references: [id], onDelete: Cascade)

  @@index([userId, status])
  @@index([isAdminNotification, status])
  @@index([type, status])
  @@index([createdAt])
}

model PushSubscription {
  id           String   @id @default(cuid())
  userId       String   @unique
  subscription Json
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("push_subscriptions")
}

model OrganizerProfile {
  id               String  @id @default(cuid())
  organizationName String
  bio              String?
  website          String?

  // Enhanced organizer fields
  businessRegistrationNumber String?
  taxIdentificationNumber    String?
  organizationType           OrganizationType?
  verificationStatus         VerificationStatus @default(PENDING)
  customPlatformFee          Float? // Custom fee percentage for this organizer

  userId String @unique
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Verification {
  id        String    @id @default(cuid())
  createdAt DateTime?
  updatedAt DateTime?

  identifier String
  value      String
  expiresAt  DateTime

  @@map("verifications")
}

model Session {
  id             String   @id @default(cuid())
  impersonatedBy String?
  createdAt      DateTime
  updatedAt      DateTime

  expiresAt DateTime
  token     String   @unique
  ipAddress String?
  userAgent String?

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model Account {
  id        String   @id @default(cuid())
  createdAt DateTime
  updatedAt DateTime

  accountId             String
  providerId            String
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("accounts")
}

model TwoFactor {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  secret      String
  backupCodes String?
  verified    Boolean @default(false)

  userId String @unique
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("twoFactor")
}

model WaitingList {
  id             String    @id @default(cuid())
  createdAt      DateTime  @default(now())
  offerExpiresAt DateTime?

  eventId String
  event   Event  @relation(fields: [eventId], references: [id])
  userId  String
  user    User   @relation(fields: [userId], references: [id])

  status WaitingStatus @default(WAITING)

  @@index([eventId, status])
  @@index([userId, eventId])
  @@index([userId])
}

model Order {
  id            String        @id @default(cuid())
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  paystackId    String        @unique
  totalAmount   Float
  quantity      Int
  paymentStatus PaymentStatus @default(PENDING)
  refundStatus  RefundStatus?

  eventId       String
  event         Event   @relation(fields: [eventId], references: [id])
  buyerId       String
  buyer         User    @relation(fields: [buyerId], references: [id])
  purchaseNotes String?

  // Enhanced order fields
  platformFee   Float   @default(0) // Platform fee amount
  paymentMethod String? // card, bank_transfer, etc.
  currency      String  @default("NGN")

  Notification Notification[]
  tickets      Ticket[] // Direct relation to tickets

  @@index([buyerId])
  @@index([eventId])
  @@index([paymentStatus])
}

model UserNote {
  id        String   @id @default(cuid())
  userId    String
  note      String
  createdBy String
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_notes")
}

model User {
  id        String   @id @default(uuid())
  createdAt DateTime
  updatedAt DateTime

  name          String
  email         String      @unique
  emailVerified Boolean
  image         String?
  firstName     String?
  lastName      String?
  banned        Boolean?
  banReason     String?
  banExpires    DateTime?
  gender        Gender?
  role          UserRole    @default(USER)
  subRole       UserSubRole @default(ORDINARY)

  // For proper suspension support
  suspended        Boolean?  @default(false)
  suspensionReason String?
  suspendedAt      DateTime?

  // For admin notes
  adminNotes UserNote[]

  // For better activity tracking
  lastSeen DateTime?

  sessions         Session[]
  accounts         Account[]
  waitingList      WaitingList[]
  blogs            Blog[]
  orders           Order[]
  rating           Rating[]
  tickets          Ticket[]
  venue            Venue[]
  eventsHosted     Event[]
  organizerProfile OrganizerProfile?
  twoFactor        TwoFactor?
  Notification     Notification[]
  validatedTickets TicketValidation[] @relation("ValidatedBy")
  payouts          Payout[]           @relation("UserPayouts")
  auditLogs        AuditLog[] // Relation to AuditLog
  PushSubscription PushSubscription?

  @@map("users")
}

model Tag {
  id      String  @id @default(cuid())
  name    String  @unique
  bgColor String
  slug    String?
  events  Event[]

  @@index([name])
}

model Rating {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  eventId   String
  event     Event    @relation(fields: [eventId], references: [id])
  rating    Decimal
  comment   String?

  @@unique([userId, eventId])
  @@index([eventId])
  @@index([userId])
}

model Ticket {
  id              String       @id @default(cuid())
  ticketId        String       @unique
  userId          String?
  user            User?        @relation(fields: [userId], references: [id])
  ticketTypeId    String
  ticketType      TicketType   @relation(fields: [ticketTypeId], references: [id])
  orderId         String?
  order           Order?       @relation(fields: [orderId], references: [id])
  status          TicketStatus @default(UNUSED)
  purchasedAt     DateTime     @default(now())
  paymentIntentId String?      @unique

  // Enhanced ticket fields
  qrCodeData    String? // JSON string with QR code data
  transferredTo String? // User ID if ticket was transferred
  transferredAt DateTime?
  usedAt        DateTime? // When ticket was scanned/used

  validations TicketValidation[]

  @@index([userId])
  @@index([ticketTypeId])
  @@index([status])
}

model TicketType {
  id       String @id @default(cuid())
  name     String
  price    Float  @default(0.0)
  quantity Int

  // Enhanced ticket type fields
  description   String?
  maxPerUser    Int?      @default(10) // Max tickets per user for this type
  saleStartDate DateTime?
  saleEndDate   DateTime?
  isRefundable  Boolean   @default(true)

  eventId String
  event   Event    @relation(fields: [eventId], references: [id])
  tickets Ticket[]

  @@index([eventId])
}

model TicketValidation {
  id          String   @id @default(cuid())
  ticketId    String
  ticket      Ticket   @relation(fields: [ticketId], references: [id])
  validatedBy String
  validator   User     @relation("ValidatedBy", fields: [validatedBy], references: [id])
  validatedAt DateTime @default(now())
  eventId     String

  // Additional validation data
  location   String? // GPS coordinates or location name
  deviceInfo String? // Scanner device information

  @@index([ticketId])
  @@index([eventId])
  @@index([validatedAt])
}

model Category {
  id     String  @id @default(cuid())
  name   String  @unique
  events Event[]

  @@index([name])
}

model City {
  id         String  @id @default(cuid())
  name       String  @unique
  population Int?
  state      String
  events     Event[]
  venues     Venue[]

  @@index([name])
}

model Venue {
  id            String         @id @default(cuid())
  name          String
  address       String
  cityId        String
  city          City           @relation(fields: [cityId], references: [id])
  userId        String
  description   String?
  contactInfo   String?
  user          User           @relation(fields: [userId], references: [id])
  capacity      Int?
  venueImageUrl String?
  latitude      String?
  longitude     String?
  events        Event[]
  Notification  Notification[]

  @@index([cityId])
}

model Event {
  id               String          @id @default(cuid())
  slug             String?
  title            String
  description      String?
  location         String?
  createdAt        DateTime        @default(now())
  updatedAt        DateTime        @updatedAt
  coverImageUrl    String?
  startDateTime    DateTime        @default(now())
  endDateTime      DateTime        @default(now())
  isFree           Boolean         @default(false)
  url              String?
  lateEntry        DateTime?
  idRequired       Boolean?        @default(false)
  attendeeLimit    Int?
  featured         Boolean         @default(false)
  embeddedVideoUrl String?
  dressCode        DressCode?
  age              AgeRestriction?

  imageUrls   String[]
  tags        Tag[]
  ratings     Rating[]
  ticketTypes TicketType[]
  orders      Order[]
  waitingList WaitingList[]

  userId     String?
  category   Category? @relation(fields: [categoryId], references: [id])
  categoryId String?
  user       User?     @relation(fields: [userId], references: [id])
  venueId    String
  venue      Venue     @relation(fields: [venueId], references: [id])
  cityId     String?
  City       City?     @relation(fields: [cityId], references: [id])

  isCancelled     Boolean?        @default(false)
  publishedStatus PublishedStatus @default(DRAFT)
  Notification    Notification[]

  @@index([title])
  @@index([publishedStatus])
  @@index([startDateTime])
  @@index([featured])
}

model BlogCategory {
  id          String   @id @default(cuid())
  name        String   @unique
  slug        String   @unique
  description String?
  color       String   @default("#3B82F6")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  blogs       Blog[]

  @@index([name])
  @@index([slug])
  @@map("blog_categories")
}

model Blog {
  id              String     @id @default(cuid())
  title           String
  slug            String     @unique
  excerpt         String?
  content         String     @db.Text
  featuredImage   String?
  metaTitle       String?
  metaDescription String?
  tags            String[]
  readingTime     Int?
  views           Int        @default(0)
  featured        Boolean    @default(false)
  status          BlogStatus @default(DRAFT)
  publishedAt     DateTime?
  createdAt       DateTime   @default(now())
  updatedAt       DateTime   @updatedAt

  authorId   String
  author     User         @relation(fields: [authorId], references: [id])
  categoryId String
  category   BlogCategory @relation(fields: [categoryId], references: [id])

  @@index([status, publishedAt(sort: Desc)])
  @@index([authorId])
  @@index([categoryId])
  @@index([slug])
  @@index([featured])
}

model PlatformSettings {
  id    String @id @default(cuid())
  key   String @unique
  value Json

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([key])
}

model Payout {
  id          String       @id @default(cuid())
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  organizerId String
  organizer   User         @relation("UserPayouts", fields: [organizerId], references: [id])
  amount      Float
  platformFee Float
  netAmount   Float
  status      PayoutStatus @default(PENDING)

  // Paystack transfer details
  transferCode String?
  transferId   String?
  bankAccount  String?
  bankCode     String?
  accountName  String?

  // Date range for this payout
  periodStart DateTime
  periodEnd   DateTime

  processedAt   DateTime?
  failureReason String?

  @@index([organizerId])
  @@index([status])
}

model AuditLog {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())

  userId   String?
  user     User?   @relation(fields: [userId], references: [id])
  action   String // CREATE, UPDATE, DELETE, etc.
  entity   String // USER, EVENT, ORDER, etc.
  entityId String?

  oldValues Json?
  newValues Json?
  ipAddress String?
  userAgent String?

  @@index([userId])
  @@index([action])
  @@index([entity])
  @@index([createdAt])
}
