generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Category {
  id    String  @id @default(cuid())
  name  String  @unique
  Event Event[]

  @@index([name])
}

model City {
  id         String  @id @default(cuid())
  name       String  @unique
  population Int?
  state      String
  events     Event[]
  venues     Venue[]

  @@index([name])
}

model Event {
  id               String          @id @default(cuid())
  title            String
  description      String?
  location         String?
  createdAt        DateTime        @default(now())
  imageUrl         String
  coverImageUrl    String?
  startDateTime    DateTime        @default(now())
  endDateTime      DateTime        @default(now())
  isFree           Boolean         @default(false)
  url              String?
  categoryId       String?
  category         Category?       @relation(fields: [categoryId], references: [id])
  userId           String?
  user             User?           @relation(fields: [userId], references: [id])
  venueId          String
  venue            Venue           @relation(fields: [venueId], references: [id])
  tags             Tag[]
  attendeeLimit    Int?
  ratings          Rating[]
  featured         Boolean         @default(false)
  embeddedVideoUrl String?
  ticketTypes      TicketType[]
  isCancelled      Boolean?        @default(false)
  publishedStatus  PublishedStatus @default(DRAFT)
  orders           Order[]
  waitingList      WaitingList[]
  City             City?           @relation(fields: [cityId], references: [id])
  cityId           String?

  @@index([title])
}

model Rating {
  id      String  @id @default(cuid())
  userId  String
  user    User    @relation(fields: [userId], references: [id])
  eventId String
  event   Event   @relation(fields: [eventId], references: [id])
  rating  Decimal
  comment String?

  @@index([eventId])
}

model TicketType {
  id       String   @id @default(cuid())
  name     String
  price    Float    @default(0.0)
  quantity Int
  eventId  String
  event    Event    @relation(fields: [eventId], references: [id])
  tickets  Ticket[]

  @@index([eventId])
}

model Ticket {
  id              String       @id @default(cuid())
  ticketId        String       @unique
  userId          String?
  user            User?        @relation(fields: [userId], references: [id])
  ticketTypeId    String
  ticketType      TicketType   @relation(fields: [ticketTypeId], references: [id])
  status          TicketStatus @default(UNUSED)
  purchasedAt     DateTime     @default(now())
  paymentIntentId String?      @unique

  @@index([userId])
}

model WaitingList {
  id             String        @id @default(cuid())
  eventId        String
  event          Event         @relation(fields: [eventId], references: [id])
  userId         String
  user           User          @relation(fields: [userId], references: [id])
  status         WaitingStatus @default(WAITING)
  offerExpiresAt DateTime?

  @@index([eventId, status])
  @@index([userId, eventId])
  @@index([userId])
}

enum TicketStatus {
  UNUSED
  USED
  REFUNDED
  CANCELLED
}

enum WaitingStatus {
  WAITING
  OFFERED
  PURCHASED
  EXPIRED
}

enum PublishedStatus {
  DRAFT
  PENDING_REVIEW
}

model Order {
  id            String        @id @default(cuid())
  createdAt     DateTime      @default(now())
  paystackId    String        @unique
  totalAmount   Float
  quantity      Int
  paymentStatus PaymentStatus @default(PENDING)
  refundStatus  RefundStatus?
  eventId       String
  event         Event         @relation(fields: [eventId], references: [id])
  buyerId       String
  buyer         User          @relation(fields: [buyerId], references: [id])
  purchaseNotes String?

  @@index([buyerId])
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
}

enum RefundStatus {
  INITIATED
  PROCESSED
  FAILED
}

model User {
  id                    String                 @id @default(cuid())
  username              String?
  name                  String?
  emailVerified         DateTime?
  firstName             String?
  lastName              String?
  image                 String?
  password              String?
  accounts              Account[]
  email                 String?                @unique
  bio                   String?
  phone                 String?
  address               String?
  accountNumber         String?
  bankName              String?
  socialLinks           SocialLink[]
  role                  Role                   @default(USER)
  organizerProfile      OrganizerProfile?
  isVerified            Boolean                @default(false)
  gender                String?
  eventsHosted          Event[]
  ratings               Rating[]
  orders                Order[]
  tickets               Ticket[]
  venue                 Venue[]
  createdAt             DateTime               @default(now())
  updatedAt             DateTime               @updatedAt
  isTwoFactorEnabled    Boolean                @default(false)
  twoFactorConfirmation TwoFactorConfirmation?
  WaitingList           WaitingList[]

  @@index([email])
}

model Account {
  id                String   @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model VerificationToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model PasswordResetToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorConfirmation {
  id     String @id @default(cuid())
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId])
}

enum Role {
  ADMIN
  ORGANIZER
  USER
}

model SocialLink {
  id       String @id @default(cuid())
  platform String
  url      String
  userId   String
  user     User   @relation(fields: [userId], references: [id])
}

model OrganizerProfile {
  id               String  @id @default(cuid())
  organizationName String
  bio              String?
  website          String?
  userId           String  @unique
  user             User    @relation(fields: [userId], references: [id])
}

model Venue {
  id          String  @id @default(cuid())
  name        String
  address     String
  cityId      String
  city        City    @relation(fields: [cityId], references: [id])
  userId      String
  description String?
  contactInfo String?
  user        User    @relation(fields: [userId], references: [id])
  capacity    Int
  latitude    String
  longitude   String
  events      Event[]

  @@index([cityId])
}

model Tag {
  id      String  @id @default(cuid())
  name    String  @unique
  bgColor String
  slug    String?
  events  Event[]

  @@index([name])
}
